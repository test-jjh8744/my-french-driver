{
  "version": 3,
  "sources": ["../../haversine-distance/index.js"],
  "sourcesContent": ["const atan2 = Math.atan2\nconst cos = Math.cos\nconst sin = Math.sin\nconst sqrt = Math.sqrt\nconst PI = Math.PI\n\n// equatorial mean radius of Earth (in meters)\nconst R = 6378137\n\nfunction squared (x) { return x * x }\nfunction toRad (x) { return x * PI / 180.0 }\nfunction hav (x) {\n  return squared(sin(x / 2))\n}\n\n// hav(theta) = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLon - aLon)\nfunction haversineDistance (a, b) {\n  const aLat = toRad(Array.isArray(a) ? a[1] : a.latitude ?? a.lat)\n  const bLat = toRad(Array.isArray(b) ? b[1] : b.latitude ?? b.lat)\n  const aLng = toRad(Array.isArray(a) ? a[0] : a.longitude ?? a.lng ?? a.lon)\n  const bLng = toRad(Array.isArray(b) ? b[0] : b.longitude ?? b.lng ?? b.lon)\n\n  const ht = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLng - aLng)\n  return 2 * R * atan2(sqrt(ht), sqrt(1 - ht))\n}\n\nmodule.exports = haversineDistance\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,QAAM,QAAQ,KAAK;AACnB,QAAM,MAAM,KAAK;AACjB,QAAM,MAAM,KAAK;AACjB,QAAM,OAAO,KAAK;AAClB,QAAM,KAAK,KAAK;AAGhB,QAAM,IAAI;AAEV,aAAS,QAAS,GAAG;AAAE,aAAO,IAAI;AAAA,IAAE;AACpC,aAAS,MAAO,GAAG;AAAE,aAAO,IAAI,KAAK;AAAA,IAAM;AAC3C,aAAS,IAAK,GAAG;AACf,aAAO,QAAQ,IAAI,IAAI,CAAC,CAAC;AAAA,IAC3B;AAGA,aAAS,kBAAmB,GAAG,GAAG;AAChC,YAAM,OAAO,MAAM,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,YAAY,EAAE,GAAG;AAChE,YAAM,OAAO,MAAM,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,YAAY,EAAE,GAAG;AAChE,YAAM,OAAO,MAAM,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG;AAC1E,YAAM,OAAO,MAAM,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG;AAE1E,YAAM,KAAK,IAAI,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,IAAI;AACrE,aAAO,IAAI,IAAI,MAAM,KAAK,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AAAA,IAC7C;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
